/* The following code was generated by JFlex 1.6.1 */

package analisador;

import componentes.Tokens;

import static componentes.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/hugor/Analisador-Lexico/src/lexer/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\30\1\30\1\27\22\0\1\3\1\0\1\31"+
    "\5\0\1\24\1\25\1\7\1\5\1\3\1\6\1\37\1\10\12\2"+
    "\1\23\1\26\1\22\1\20\1\21\2\0\32\1\4\0\1\1\1\0"+
    "\1\14\1\34\1\45\1\13\1\35\1\51\1\33\1\46\1\36\1\1"+
    "\1\52\1\41\1\11\1\15\1\12\1\32\1\1\1\16\1\42\1\17"+
    "\1\43\1\47\1\40\1\50\1\44\1\1\12\0\1\30\u1fa2\0\1\30"+
    "\1\30\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\3\6\7\2"+
    "\3\7\3\10\1\4\1\1\5\2\1\11\10\2\2\0"+
    "\1\12\2\4\2\2\1\13\2\14\11\2\1\15\3\0"+
    "\27\2\1\6\7\2\2\0\1\16\1\4\4\2\1\17"+
    "\12\2\1\14\3\2\1\20\2\2\1\3\1\16\12\2"+
    "\1\14\3\2\1\21\3\2\1\22\13\2\1\23\3\2"+
    "\1\24\3\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\53\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\53\0\u0285\0\u02b0\0\u02db\0\u0306\0\53\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\53\0\u0102"+
    "\0\u045e\0\53\0\u05e1\0\u060c\0\u0637\0\126\0\126\0\u0662"+
    "\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\53\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7"+
    "\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f"+
    "\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97"+
    "\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\126\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\53\0\u083b"+
    "\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\126\0\u0e9d\0\u0ec8\0\u0ef3"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b"+
    "\0\u1076\0\u10a1\0\u10cc\0\126\0\u10f7\0\u1122\0\53\0\327"+
    "\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a"+
    "\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\126\0\u13a7"+
    "\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff"+
    "\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\126\0\u162c"+
    "\0\u1657\0\u1682\0\126\0\u16ad\0\u16d8\0\u12fb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\26\1\27\1\0\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\3\1\43\1\3\1\44\1\45\1\46"+
    "\1\3\4\47\1\0\2\47\1\50\17\47\2\0\23\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\5\3\1\47\13\3\2\47\1\4\1\47"+
    "\1\0\2\47\1\50\17\47\2\0\6\47\1\51\16\47"+
    "\1\5\1\0\2\47\1\50\17\47\1\27\1\0\22\47"+
    "\53\0\4\47\1\0\2\47\1\50\1\52\16\47\2\0"+
    "\26\47\1\0\2\47\1\53\17\47\2\0\23\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\1\3\1\54\1\3"+
    "\1\55\3\3\7\47\2\0\1\47\5\3\1\47\13\3"+
    "\1\47\2\3\1\47\1\0\2\47\1\50\1\47\5\3"+
    "\1\56\1\3\7\47\2\0\1\47\5\3\1\47\11\3"+
    "\1\57\1\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\1\3\1\60\5\3\7\47\2\0\1\47\4\3"+
    "\1\61\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\4\3\1\62\1\63\1\3\7\47\2\0"+
    "\1\47\2\3\1\64\2\3\1\47\13\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\1\3\1\65\5\3"+
    "\7\47\2\0\1\47\4\3\1\66\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\3\3\1\67\1\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\1\3\1\57"+
    "\5\3\7\47\2\0\1\47\5\3\1\47\4\3\1\70"+
    "\1\3\1\71\4\3\4\47\1\0\2\47\1\50\10\47"+
    "\1\21\6\47\2\0\26\47\1\0\2\47\1\50\10\47"+
    "\2\21\5\47\2\0\26\47\1\0\2\47\1\50\10\47"+
    "\1\72\6\47\2\0\26\47\1\0\1\47\1\73\1\50"+
    "\17\47\2\0\22\47\3\0\1\27\23\0\1\27\23\0"+
    "\4\74\1\0\2\74\1\75\17\74\2\0\22\74\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\3\3\1\76"+
    "\1\3\1\77\1\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\1\3\1\100\5\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\7\3\7\47\2\0\1\47\3\3\1\101\1\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\4\3\1\102\2\3\7\47\2\0\1\47\5\3\1\47"+
    "\1\3\1\103\6\3\1\104\2\3\1\47\2\3\1\47"+
    "\1\0\2\47\1\50\1\47\1\105\3\3\1\106\2\3"+
    "\7\47\2\0\1\47\5\3\1\47\11\3\1\57\1\3"+
    "\2\47\1\51\1\47\1\0\2\47\1\50\17\47\2\0"+
    "\23\47\2\3\1\47\1\0\2\47\1\50\1\47\5\3"+
    "\1\107\1\3\7\47\2\0\1\47\4\3\1\110\1\47"+
    "\6\3\1\111\4\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\3\3\1\112\3\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\6\3\1\113\7\47\2\0\1\47\3\3"+
    "\1\114\1\3\1\47\6\3\1\115\4\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\4\3\1\116\2\3"+
    "\7\47\2\0\1\47\5\3\1\47\2\3\1\117\10\3"+
    "\1\47\2\3\1\47\1\0\2\47\1\50\1\47\1\3"+
    "\1\120\1\3\1\103\3\3\7\47\2\0\1\47\5\3"+
    "\1\47\6\3\1\44\4\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\3\3\1\121\3\3\7\47\2\0"+
    "\1\47\5\3\1\47\13\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\1\3\1\121\5\3\7\47\2\0"+
    "\1\47\5\3\1\47\13\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\1\3\1\122\5\3\7\47\2\0"+
    "\1\47\4\3\1\123\1\47\3\3\1\124\7\3\4\53"+
    "\1\0\22\53\2\0\22\53\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\2\3\1\125\4\3\7\47\2\0"+
    "\1\47\5\3\1\47\13\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\7\3\7\47\2\0\1\47\4\3"+
    "\1\126\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\5\3\1\47"+
    "\1\100\12\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\7\3\7\47\2\0\1\47\5\3\1\47\7\3"+
    "\1\57\3\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\2\3\1\56\4\3\7\47\2\0\1\47\5\3"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\5\3\1\127\1\3\7\47\2\0\1\47\5\3"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\1\3\1\130\5\3\7\47\2\0\1\47\5\3"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\6\3\1\56\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\6\3\1\57\7\47\2\0\1\47\5\3\1\47\1\3"+
    "\1\57\11\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\3\3\1\131\3\3\7\47\2\0\1\47\1\132"+
    "\4\3\1\47\5\3\1\133\5\3\1\47\2\3\1\47"+
    "\1\0\2\47\1\50\1\47\7\3\7\47\2\0\1\47"+
    "\1\134\4\3\1\47\13\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\7\3\7\47\2\0\1\47\3\3"+
    "\1\126\1\3\1\47\13\3\2\47\1\135\1\47\1\0"+
    "\2\47\1\50\17\47\2\0\22\47\4\74\1\136\2\74"+
    "\1\75\17\74\2\136\1\137\25\74\1\136\2\74\1\75"+
    "\1\140\16\74\2\136\1\137\21\74\1\47\2\3\1\47"+
    "\1\0\2\47\1\50\1\47\7\3\7\47\2\0\1\47"+
    "\5\3\1\47\5\3\1\141\5\3\1\47\2\3\1\47"+
    "\1\0\2\47\1\50\1\47\1\3\1\142\5\3\7\47"+
    "\2\0\1\47\5\3\1\47\13\3\1\47\2\3\1\47"+
    "\1\0\2\47\1\50\1\47\6\3\1\143\7\47\2\0"+
    "\1\47\5\3\1\47\13\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\7\3\7\47\2\0\1\47\1\3"+
    "\1\144\3\3\1\47\13\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\2\3\1\145\4\3\7\47\2\0"+
    "\1\47\5\3\1\47\13\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\7\3\7\47\2\0\1\47\5\3"+
    "\1\47\2\3\1\134\10\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\6\3\1\146\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\1\147\4\3"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\6\3\1\150\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\7\3\7\47\2\0\1\47\4\3\1\151\1\47\13\3"+
    "\1\47\2\3\1\47\1\0\2\47\1\50\1\47\6\3"+
    "\1\152\7\47\2\0\1\47\5\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\4\3\1\123\1\47\13\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\7\3\7\47\2\0"+
    "\1\47\2\3\1\153\2\3\1\47\13\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\5\3\1\154\1\3"+
    "\7\47\2\0\1\47\5\3\1\47\13\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\6\3\1\57\7\47"+
    "\2\0\1\47\5\3\1\47\13\3\1\47\2\3\1\47"+
    "\1\0\2\47\1\50\1\47\5\3\1\57\1\3\7\47"+
    "\2\0\1\47\5\3\1\47\1\3\1\57\11\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\6\3\1\155"+
    "\7\47\2\0\1\47\4\3\1\114\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\3\3\1\156\1\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\4\3\1\157"+
    "\2\3\7\47\2\0\1\47\5\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\5\3\1\57"+
    "\1\3\7\47\2\0\1\47\5\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\5\3\1\160"+
    "\1\3\7\47\2\0\1\47\5\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\5\3\1\47\1\3\1\134\11\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\4\3\1\161"+
    "\2\3\7\47\2\0\1\47\5\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\4\3\1\57"+
    "\2\3\7\47\2\0\1\47\5\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\3\3\1\162"+
    "\3\3\7\47\2\0\1\47\5\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\5\3\1\47\2\3\1\163\10\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\2\3\1\164"+
    "\4\3\7\47\2\0\1\47\5\3\1\47\1\3\1\57"+
    "\11\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\7\3\7\47\2\0\1\47\3\3\1\165\1\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\1\3\1\166\5\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\7\3\7\47\2\0\1\47\3\3\1\57\1\3\1\47"+
    "\13\3\2\47\1\135\1\47\1\0\2\47\1\50\15\47"+
    "\1\167\1\47\2\0\22\47\31\136\1\170\21\136\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\5\3\1\47\12\3\1\171\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\7\3\7\47\2\0"+
    "\1\47\1\3\1\172\3\3\1\47\5\3\1\57\5\3"+
    "\1\47\2\3\1\47\1\0\2\47\1\50\1\47\1\3"+
    "\1\57\5\3\7\47\2\0\1\47\5\3\1\47\13\3"+
    "\1\47\2\3\1\47\1\0\2\47\1\50\1\47\7\3"+
    "\7\47\2\0\1\47\4\3\1\173\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\3\3\1\174\1\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\5\3\1\47\1\3\1\175\11\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\3\3\1\176\1\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\6\3\1\177"+
    "\7\47\2\0\1\47\5\3\1\47\13\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\7\3\7\47\2\0"+
    "\1\47\5\3\1\47\6\3\1\57\4\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\7\3\7\47\2\0"+
    "\1\47\3\3\1\200\1\3\1\47\13\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\7\3\7\47\2\0"+
    "\1\47\4\3\1\201\1\47\13\3\1\47\2\3\1\47"+
    "\1\0\2\47\1\50\1\47\7\3\7\47\2\0\1\47"+
    "\4\3\1\200\1\47\13\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\7\3\7\47\2\0\1\47\5\3"+
    "\1\47\2\3\1\57\10\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\7\3\7\47\2\0\1\47\5\3"+
    "\1\47\2\3\1\114\10\3\1\47\2\3\1\47\1\0"+
    "\2\47\1\50\1\47\7\3\7\47\2\0\1\47\5\3"+
    "\1\47\1\202\12\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\5\3\1\47"+
    "\5\3\1\203\5\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\5\3\1\47"+
    "\4\3\1\57\6\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\1\3\1\204\5\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\3\3\1\114\3\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\5\3\1\205\1\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\3\3\1\205"+
    "\1\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\5\3\1\206\1\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\4\3\1\207\2\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\5\3\1\210\1\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\3\3\1\211"+
    "\1\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\5\3\1\212\1\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\3\3\1\213"+
    "\1\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\5\3\1\47"+
    "\1\3\1\57\11\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\4\3\1\214\2\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\3\3\1\166\3\3\7\47\2\0\1\47"+
    "\5\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\6\3\1\215\7\47\2\0\1\47\5\3"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\7\3\7\47\2\0\1\47\5\3\1\47\1\3"+
    "\1\216\11\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\2\3\1\57\4\3\7\47\2\0\1\47\5\3"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\3\3\1\217\3\3\7\47\2\0\1\47\5\3"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\4\3\1\220\2\3\7\47\2\0\1\47\5\3"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\1\221\6\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\5\3\1\222\1\3\7\47\2\0\1\47\5\3\1\47"+
    "\11\3\1\223\1\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\5\3\1\47"+
    "\1\3\1\224\11\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\1\3\1\57"+
    "\3\3\1\47\13\3\1\47\2\3\1\47\1\0\2\47"+
    "\1\50\1\47\7\3\7\47\2\0\1\47\4\3\1\225"+
    "\1\47\13\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\7\3\7\47\2\0\1\47\5\3\1\47\3\3"+
    "\1\226\7\3\1\47\2\3\1\47\1\0\2\47\1\50"+
    "\1\47\1\227\6\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\3\3\1\200\3\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\7\3\7\47\2\0\1\47\3\3\1\230\1\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\7\3\7\47\2\0\1\47\5\3\1\47\3\3\1\231"+
    "\7\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\3\3\1\232\3\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\4\3\1\233\2\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\1\3\1\126\5\3\7\47\2\0\1\47\5\3\1\47"+
    "\13\3\1\47\2\3\1\47\1\0\2\47\1\50\1\47"+
    "\6\3\1\134\7\47\2\0\1\47\5\3\1\47\13\3"+
    "\1\47\2\3\1\47\1\0\2\47\1\50\1\47\4\3"+
    "\1\234\2\3\7\47\2\0\1\47\5\3\1\47\13\3"+
    "\1\47\2\3\1\47\1\0\2\47\1\50\1\47\7\3"+
    "\7\47\2\0\1\47\1\114\4\3\1\47\13\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\7\3\7\47"+
    "\2\0\1\47\5\3\1\47\5\3\1\134\5\3\1\47"+
    "\2\3\1\47\1\0\2\47\1\50\1\47\6\3\1\235"+
    "\7\47\2\0\1\47\5\3\1\47\13\3\1\47\2\3"+
    "\1\47\1\0\2\47\1\50\1\47\3\3\1\236\3\3"+
    "\7\47\2\0\1\47\5\3\1\47\13\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5891];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\1\1\11\40\1\2\0\22\1\3\0\37\1"+
    "\2\0\31\1\1\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 21: break;
          case 2: 
            { lexeme = yytext(); return IDENTIFICADOR;
            }
          case 22: break;
          case 3: 
            { lexeme = yytext(); return NUMERO;
            }
          case 23: break;
          case 4: 
            { /*Ignore*/
            }
          case 24: break;
          case 5: 
            { lexeme = yytext(); return LINHA;
            }
          case 25: break;
          case 6: 
            { lexeme = yytext(); return OPERADOR_ARITMETICO;
            }
          case 26: break;
          case 7: 
            { lexeme = yytext(); return OP_RELACIONAL;
            }
          case 27: break;
          case 8: 
            { lexeme = yytext(); return SIMBOLO_ESPECIAL;
            }
          case 28: break;
          case 9: 
            { lexeme = yytext(); return FIM;
            }
          case 29: break;
          case 10: 
            { lexeme = yytext(); return NUMEROREAL;
            }
          case 30: break;
          case 11: 
            { lexeme = yytext(); return OP_LOGICO;
            }
          case 31: break;
          case 12: 
            { lexeme = yytext(); return PALAVRA;
            }
          case 32: break;
          case 13: 
            { lexeme = yytext(); return OP_ATRIBUICAO;
            }
          case 33: break;
          case 14: 
            { lexeme = yytext(); return STRING_LITERAL;
            }
          case 34: break;
          case 15: 
            { lexeme = yytext(); return FIM_BLOCO;
            }
          case 35: break;
          case 16: 
            { lexeme = yytext(); return LEIA;
            }
          case 36: break;
          case 17: 
            { lexeme = yytext(); return INICIO_BLOCO;
            }
          case 37: break;
          case 18: 
            { lexeme = yytext(); return ESCREVA;
            }
          case 38: break;
          case 19: 
            { lexeme = yytext(); return INICIO;
            }
          case 39: break;
          case 20: 
            { lexeme = yytext(); return ESCREVALN;
            }
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
